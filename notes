This is what it means to install a gem:

  # Gem::Installer does the work of putting files in all the right places on the
  # filesystem including unpacking the gem into its gem dir, installing the
  # gemspec in the specifications dir, storing the cached gem in the cache dir,
  # and installing either wrappers or symlinks for executables.

  Gem::Installer

    install_dir is gem_home

    # Constructs an Installer instance that will install the gem located at
    # +gem+.  +options+ is a Hash with the following keys:
    #
    # :bin_dir:: Where to put a bin wrapper if needed.
    # :development:: Whether or not development dependencies should be installed.
    # :env_shebang:: Use /usr/bin/env in bin wrappers.
    # :force:: Overrides all version checks and security policy checks, except
    #          for a signed-gems-only policy.
    # :format_executable:: Format the executable the same as the Ruby executable.
    #                      If your Ruby is ruby18, foo_exec will be installed as
    #                      foo_exec18.
    # :ignore_dependencies:: Don't raise if a dependency is missing.
    # :install_dir:: The directory to install the gem into.
    # :security_policy:: Use the specified security policy.  See Gem::Security
    # :user_install:: Indicate that the gem should be unpacked into the users
    #                 personal gem directory.
    # :only_install_dir:: Only validate dependencies against what is in the
    #                     install_dir
    # :wrappers:: Install wrappers if true, symlinks if false.
    # :build_args:: An Array of arguments to pass to the extension builder
    #               process. If not set, then Gem::Command.build_args is used



Using Bundler for dependency management
  Looks like I can do (http://myronmars.to/n/dev-blog/2012/03/faster-test-boot-times-with-bundler-standalone)
    $ bundle install --standalone --binstubs bundle/bin
    then fix the path in the wrapper script so that it's like
    ...ruby -r bundle/bundler/setup.rb -S seeing_is_believing
    or maybe can set PATH/RUBYPATH and RUBYLIB?
    Seems a lot easier to get the info I need from Bundler than Rubygems.

    Omg, this page is amazing!
      http://bundler.io/bundle_install.html

      --binstubs:   Generate bin stubs for bundled gems to ./bin
      --gemfile:    Use the specified gemfile instead of Gemfile
      --local:      Do not attempt to fetch gems remotely and use the gem cache instead
      --shebang:    Specify a different shebang executable name than the default (usually 'ruby')
      --standalone: Make a bundle that can work without the Bundler runtime

      $ bundle install --path vendor/bundle
        Install your dependencies, even gems that are already installed to your system gems,
        to a location other than your system's gem repository.
        In this case, install them to vendor/bundle.
        Further bundle commands or calls to Bundler.
        setup or Bundler.require will remember this location.

      $ bundle install --deployment
        Isolate all gems into vendor/bundle
        Require an up-to-date Gemfile.lock
        If bundle package was run, do not fetch gems from rubygems.org. Instead, only use gems in the checked in vendor/cache

      bundle package
      bundle install --local --gemfile some/Gemfile --path some/fucking/path



Using Rubygems for dependency management

  # Some code that might do it (Rubygems)
    # We can use RUBYLIB to put the dependency in place
    cache_dir = "#{temp_dir}/unpacked/#{gem_name}-#{gem_version}"
    world.unpack_gem name: name, version: version, directory: cache_dir
      basename = "#{name}-#{version}"
      if File.join(directory, basename).exist?
        return
      elsif File.join(cache_dir, basename + '.gem').exist?
        unpack it
        return
      else
        # taken a bit from `gem fetch`, and a bit from `gem unpack`
        dep = Gem::Dependency.new 'seeing_is_believing', '3.0.0.beta.5'
        specs_and_sources, errors = Gem::SpecFetcher.fetcher.spec_for_dependency dep
        spec, source = specs_and_sources.max_by { |s,| s.version }
        path       = source.download spec, cache_dir               # "/Users/josh/deleteme/fuckery/seeing_is_believing-3.0.0.beta.5.gem"
        basename   = File.basename path, '.gem'                    # => "seeing_is_believing-3.0.0.beta.5"
        target_dir = File.expand_path basename, unpacked_dir
        package    = Gem::Package.new path
        package.extract_files target_dir
      end

  ---------------------------------

  # Some code that looks promising, but I can't tell how to get it to work generally (as in from something like a Gemfile)
    ruby_root = ~/deleteme/traveling-ruby-tutorial/hello_app/hello-1.0.0-osx/lib/ruby/

    command
      gem install
        --local
        --no-wrappers
        --no-document
        --env-shebang $ruby_root/bin/ruby
        --install-dir $ruby_root/lib/ruby/gems/2.1.0
        --bindir      $ruby_root/bin
        --version     3.0.0.beta.5
        seeing_is_believing

    notes
      --local       sets :domain      to :local
      --no-wrappers sets :wrappers    to false
      --no-document sets :document    to []
      --install-dir sets :install_dir to passed value
      --bindir      sets :bin_dir     to passed value

      --vendor ?
        options[:vendor] = true
        options[:install_dir] = Gem.vendor_dir
